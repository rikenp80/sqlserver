USE [DBA_Logs]GOSET ANSI_NULLS ONGOSET QUOTED_IDENTIFIER ONGO------------------------------------------------------------------------------------------------------ OBJECT NAME			:	uspp_Log_QueryDurations---- AUTHOR				:	Riken Patel---- INPUTS				:	None-- OUTPUTS				:	None-- DEPENDENCIES			:	None---- DESCRIPTION			:	get durations and reads of queries running longer than 5 seconds---- EXAMPLES (optional)  :	exec uspp_Log_QueryDurations 5----------------------------------------------------------------------------------------------------ALTER PROC [dbo].[uspp_Log_QueryDurations] @DurationThreshold SMALLINTASSET NOCOUNT ONCREATE TABLE #LongRunningQueries	(	QueryHash				VARBINARY(64) NOT NULL,	ExecutionCount			BIGINT NOT NULL,	Last_Execution_Time		DATETIME2(3) NOT NULL,	Last_CPU_Time_Secs		DECIMAL (9,2),	Avg_CPU_Time_Secs		DECIMAL (9,2),	Avg_Physical_Reads		BIGINT NOT NULL,	Avg_Logical_Reads		BIGINT NOT NULL,	DBName					VARCHAR(200) NULL,	StatementText			VARCHAR(MAX) NULL	)		/*insert all queries longer than 5 secs in a temp table*/	INSERT INTO #LongRunningQueries(QueryHash, ExecutionCount, Last_Execution_Time, Last_CPU_Time_Secs, Avg_CPU_Time_Secs, Avg_Physical_Reads, Avg_Logical_Reads, DBName, StatementText)SELECT query_hash,	SUM(execution_count),	MAX(last_execution_time),	MAX(last_worker_time)/1000000.0,    (SUM(total_worker_time) / SUM(execution_count))/1000000.0,    SUM(total_physical_reads) / SUM(execution_count),    SUM(total_logical_reads) / SUM(execution_count),    DBName,    MIN(statement_text)FROM     (SELECT QS.query_hash, QS.total_worker_time, QS.last_execution_time, QS.last_worker_time, QS.execution_count, QS.total_physical_reads, QS.total_logical_reads,		DB_NAME(ST.[dbid]) 'DBName', SUBSTRING(ST.[text], (QS.statement_start_offset/2) + 1,					((CASE statement_end_offset 			WHEN -1 THEN DATALENGTH(ST.[text])			ELSE QS.statement_end_offset END 				- QS.statement_start_offset)/2) + 1) 'statement_text'				     FROM sys.dm_exec_query_stats QS CROSS APPLY sys.dm_exec_sql_text(QS.[sql_handle]) ST) AS AGROUP BY query_hash, DBName/*insert new records into LongRunningQueries*/INSERT INTO LongRunningQueries(QueryHash, ExecutionCount, Last_Execution_Time, Last_CPU_Time_Secs, Avg_CPU_Time_Secs, Avg_Physical_Reads, Avg_Logical_Reads, DBName, StatementText)SELECT QueryHash, ExecutionCount, Last_Execution_Time, Last_CPU_Time_Secs, Avg_CPU_Time_Secs, Avg_Physical_Reads, Avg_Logical_Reads, DBName, StatementTextFROM #LongRunningQueries AWHERE Avg_CPU_Time_Secs > @DurationThreshold	AND NOT EXISTS (SELECT * FROM LongRunningQueries B WHERE A.QueryHash = B.QueryHash AND A.DBName = B.DBName)/*update existing records in LongRunningQueries with the latest stats*/UPDATE ASET A.ExecutionCount = B.ExecutionCount,	A.Last_Execution_Time = B.Last_Execution_Time,	A.Last_CPU_Time_Secs = B.Last_CPU_Time_Secs,	A.Avg_CPU_Time_Secs = B.Avg_CPU_Time_Secs,	A.Avg_Physical_Reads = B.Avg_Physical_Reads,	A.Avg_Logical_Reads = B.Avg_Logical_Reads,	A.StatementText = B.StatementTextFROM LongRunningQueries A INNER JOIN #LongRunningQueries B ON A.QueryHash = B.QueryHash AND A.DBName = B.DBNameGO